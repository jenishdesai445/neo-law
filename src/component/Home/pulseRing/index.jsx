import { Box, Text } from '@chakra-ui/react';
import { useEffect, useRef } from 'react';
import { keyframes } from '@emotion/react';

// Define the keyframe animation for the spinning text
const rotateText = keyframes`
  0% { transform: rotate(360deg); }
  100% { transform: rotate(0deg); }
`;

export default function SpinningText() {
  // Use a ref to access the text element
  const textRef = useRef(null);

  // The text you want to display
  const textToDisplay = 'NEO LAW • NEO LAW • NEO LAW •';

  // Split the text and apply the rotation to each character
  useEffect(() => {
    if (textRef.current) {
      const textElement = textRef.current;
      const characters = textToDisplay.split('');
      const totalChars = characters.length;
      const angleIncrement = 360 / totalChars;

      // Define responsive font sizes based on screen size
      const fontSize = {
        base: '8px', // Smaller font for small screens
        sm: '10px', // Standard font for medium screens
        md: '20px', // Larger font for large screens
      };

      textElement.innerHTML = characters
        .map(
          (char, i) =>
            `<span style="
              position: absolute;
              left: 50%;
              transform-origin: 0 calc(var(--circle-size) / 2);
              font-size: var(--font-size); /* Use the CSS variable here */
              letter-spacing: 0;
              transform: rotate(${i * angleIncrement}deg);
            ">${char}</span>`
        )
        .join('');

      // Set the CSS variable for font size based on the responsive values
      // This is a simple way to implement it, but a more robust solution would be to use a state variable and update on resize
      const setFontSize = () => {
        if (window.innerWidth < 350) {
          textRef.current.style.setProperty('--font-size', fontSize.base);
        } else if (window.innerWidth < 500) {
          textRef.current.style.setProperty('--font-size', fontSize.sm);
        } else {
          textRef.current.style.setProperty('--font-size', fontSize.lg);
        }
      };

      setFontSize();
      window.addEventListener('resize', setFontSize);
      return () => window.removeEventListener('resize', setFontSize);
    }
  }, [textToDisplay]);

  return (
    <Box width="fit-content">
      <Box
        display="flex"
        width="fit-content"
        rounded="100%"
        justifyContent="center"
        alignItems="center"
        fontFamily="'Raleway', sans-serif"
        bg="#FFF0DB" // A light gray background for contrast
        p="10px"
      >
        <Box
          position="relative"
          display="flex"
          justifyContent="center"
          alignItems="center"
          borderRadius="full"
          width={{ base: '100px', sm: '150px', md: '180px' }}
          height={{ base: '100px', sm: '150px', md: '180px' }}
          sx={{
            '--circle-size': '180px', // Default size for the transform-origin
            '@media (max-width: 768px)': {
              '--circle-size': '150px',
            },
            '@media (max-width: 480px)': {
              '--circle-size': '100px',
            },
          }}
        >
          {/* Placeholder for the logo */}
          <Box
            position="absolute"
            bg="#FFF0DB"
            borderRadius="full"
            width={{ base: '70px', sm: '100px', md: '116px' }}
            height={{ base: '70px', sm: '100px', md: '116px' }}
            backgroundImage="url('/image/icon/SpinningLogo.png')"
            backgroundSize={{ base: 'contain', md: 'inherit' }}
            backgroundPosition="center"
            bgRepeat="no-repeat"
            zIndex={1}
            border="1px solid #A8463F"
          />

          {/* The spinning text container */}

          <Box
            bg="#FFF0DB"
            rounded="100%"
            border="1px solid #A8463F"
            color="#A8463F"
            position="absolute"
            width="100%"
            height="100%"
            ref={textRef}
            animation={`${rotateText} 10s linear infinite`}
          >
            {/* The content will be dynamically generated by the useEffect hook */}
          </Box>
        </Box>
      </Box>
    </Box>
  );
}
